{
  "server/package.json": "{\n  \"name\": \"badge-management-system\",\n  \"version\": \"1.0.0\",\n  \"description\": \"API for managing badges with OpenAPI specification.\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"node src/index.js\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"express-openapi-validator\": \"^4.12.0\",\n    \"swagger-ui-express\": \"^4.1.6\",\n    \"mongoose\": \"^6.0.12\",\n    \"dotenv\": \"^10.0.0\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^27.3.1\",\n    \"supertest\": \"^6.1.6\",\n    \"eslint\": \"^8.1.0\",\n    \"prettier\": \"^2.4.1\"\n  }\n}",
  "server/src/index.js": "const app = require('./app');\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});",
  "server/src/app.js": "const express = require('express');\nconst OpenApiValidator = require('express-openapi-validator');\nconst path = require('path');\nconst openApiDocument = require('../docs/openapi.json');\nconst swaggerUiRouter = require('./swagger-ui/setup');\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use(\n  OpenApiValidator.middleware({\n    apiSpec: path.join(__dirname, '../docs/openapi.json'),\n    validateRequests: true,\n    validateResponses: true,\n  })\n);\n\napp.use('/docs', swaggerUiRouter);\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).json({\n    message: err.message,\n    errors: err.errors,\n  });\n});\n\nmodule.exports = app;",
  "server/.env-example": "PORT=3000\nMONGODB_URI=mongodb://localhost:27017/badge-management-system\nOAUTH_CLIENT_ID=your-oauth-client-id\nOAUTH_CLIENT_SECRET=your-oauth-client-secret",
  "server/src/models/Badge.js": "const mongoose = require('mongoose');\n\nconst badgeSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    minlength: 1,\n    unique: true\n  },\n  description: {\n    type: String,\n    required: true,\n    minlength: 3,\n    maxlength: 300\n  },\n  points: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n    immutable: true\n  },\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  modifiedAt: {\n    type: Date,\n    default: Date.now\n  },\n  modifiedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    immutable: true\n  },\n  images: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Image',\n    maxItems: 5\n  }]\n});\n\nmodule.exports = mongoose.model('Badge', badgeSchema);",
  "server/src/models/Image.js": "const mongoose = require('mongoose');\n\nconst imageSchema = new mongoose.Schema({\n  url: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/.test(v);\n      },\n      message: props => `${props.value} is not a valid URL!`\n    }\n  },\n  size: {\n    type: Number,\n    max: 5\n  }\n});\n\nmodule.exports = mongoose.model('Image', imageSchema);",
  "server/src/models/User.js": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minlength: 1\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: {\n      validator: function(v) {\n        return /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(v);\n      },\n      message: props => `${props.value} is not a valid email!`\n    }\n  }\n});\n\nmodule.exports = mongoose.model('User', userSchema);",
  "server/src/services/badgeService.js": "const Badge = require('../models/Badge');\n\nconst badgeService = {\n  async createBadge(badgeData) {\n    try {\n      const badge = new Badge(badgeData);\n      await badge.save();\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async getBadges({ sort, limit, offset }) {\n    try {\n      let query = Badge.find();\n      if (sort) {\n        query = query.sort(sort);\n      }\n      if (limit) {\n        query = query.limit(limit);\n      }\n      if (offset) {\n        query = query.skip(offset);\n      }\n      const badges = await query.exec();\n      const total = await Badge.countDocuments();\n      return { items: badges, total };\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async getBadgeById(id) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async updateBadgeById(id, badgeData, userId) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      if (badge.createdBy.toString() !== userId) {\n        throw new Error('You are not the creator of this badge');\n      }\n      Object.assign(badge, badgeData);\n      badge.modifiedAt = new Date();\n      badge.modifiedBy = userId;\n      await badge.save();\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async deleteBadgeById(id, userId) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      if (badge.createdBy.toString() !== userId) {\n        throw new Error('You are not the creator of this badge');\n      }\n      await badge.remove();\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nmodule.exports = badgeService;",
  "server/src/services/userService.js": "const User = require('../models/User');\n\nconst userService = {\n  async loginUser({ provider, token }) {\n    try {\n      // Placeholder for OAuth verification logic\n      // In a real scenario, you would verify the token with the provider\n      // and fetch user details\n      const user = await User.findOne({ email: 'example@example.com' });\n      if (!user) {\n        throw new Error('User not found');\n      }\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nmodule.exports = userService;",
  "server/src/controllers/badgeController.js": "const badgeService = require('../services/badgeService');\nconst { Error } = require('../utils/error');\n\nconst badgeController = {\n  async listBadges(req, res, next) {\n    try {\n      const { sort, limit, offset } = req.query;\n      const badges = await badgeService.getBadges({ sort, limit, offset });\n      res.status(200).json(badges);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async createBadge(req, res, next) {\n    try {\n      const badgeData = req.body;\n      const badge = await badgeService.createBadge(badgeData);\n      res.status(201).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async getBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const badge = await badgeService.getBadgeById(id);\n      res.status(200).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async updateBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const badgeData = req.body;\n      const userId = req.user.id; // Assuming user is authenticated and userId is available\n      const badge = await badgeService.updateBadgeById(id, badgeData, userId);\n      res.status(200).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async deleteBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id; // Assuming user is authenticated and userId is available\n      await badgeService.deleteBadgeById(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      next(error);\n    }\n  }\n};\n\nmodule.exports = badgeController;",
  "server/src/controllers/userController.js": "const userService = require('../services/userService');\nconst { Error } = require('../utils/error');\n\nconst userController = {\n  async loginUser(req, res, next) {\n    try {\n      const { provider, token } = req.body;\n      const user = await userService.loginUser({ provider, token });\n      res.status(200).json(user);\n    } catch (error) {\n      next(error);\n    }\n  }\n};\n\nmodule.exports = userController;",
  "server/src/middleware/auth.js": "const jwt = require('jsonwebtoken');\nconst { Error } = require('../utils/error');\n\nconst authMiddleware = async (req, res, next) => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new Error('Unauthorized', 401);\n    }\n    const decoded = jwt.verify(token, process.env.OAUTH_CLIENT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nmodule.exports = authMiddleware;",
  "server/src/middleware/logging.js": "const loggingMiddleware = (req, res, next) => {\n  const start = Date.now();\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    console.log(`${req.method} ${req.originalUrl} - ${res.statusCode} [${duration}ms]`);\n  });\n  next();\n};\n\nmodule.exports = loggingMiddleware;",
  "server/src/middleware/validator.js": "const { OpenApiValidator } = require('express-openapi-validator');\nconst path = require('path');\n\nconst validatorMiddleware = OpenApiValidator.middleware({\n  apiSpec: path.join(__dirname, '../../docs/openapi.json'),\n  validateRequests: true,\n  validateResponses: true,\n});\n\nmodule.exports = validatorMiddleware;",
  "server/tests/badges.test.js": "const request = require('supertest');\nconst app = require('../src/app');\nconst Badge = require('../src/models/Badge');\n\ndescribe('GET /badges', () => {\n  it('should return a list of badges', async () => {\n    const res = await request(app)\n      .get('/badges')\n      .expect(200);\n\n    expect(res.body).toHaveProperty('items');\n    expect(res.body).toHaveProperty('total');\n  });\n\n  it('should return 400 for invalid sort parameter', async () => {\n    await request(app)\n      .get('/badges?sort=invalid')\n      .expect(400);\n  });\n});\n\ndescribe('POST /badges', () => {\n  it('should create a new badge', async () => {\n    const badgeData = {\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    };\n\n    const res = await request(app)\n      .post('/badges')\n      .send(badgeData)\n      .expect(201);\n\n    expect(res.body).toHaveProperty('id');\n    expect(res.body.title).toBe(badgeData.title);\n  });\n\n  it('should return 400 for invalid input', async () => {\n    const badgeData = {\n      title: '',\n      description: 'This is a test badge',\n      points: -10,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    };\n\n    await request(app)\n      .post('/badges')\n      .send(badgeData)\n      .expect(400);\n  });\n});",
  "server/tests/badgeById.test.js": "const request = require('supertest');\nconst app = require('../src/app');\nconst Badge = require('../src/models/Badge');\n\ndescribe('GET /badges/:id', () => {\n  it('should return a badge by id', async () => {\n    const badge = new Badge({\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    });\n    await badge.save();\n\n    const res = await request(app)\n      .get(`/badges/${badge.id}`)\n      .expect(200);\n\n    expect(res.body).toHaveProperty('id', badge.id);\n  });\n\n  it('should return 404 for non-existent badge', async () => {\n    await request(app)\n      .get('/badges/550e8400-e29b-41d4-a716-446655440000')\n      .expect(404);\n  });\n});\n\ndescribe('PUT /badges/:id', () => {\n  it('should update a badge', async () => {\n    const badge = new Badge({\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    });\n    await badge.save();\n\n    const updatedData = {\n      title: 'Updated Badge',\n      description: 'This is an updated badge',\n      points: 200\n    };\n\n    const res = await request(app)\n      .put(`/badges/${badge.id}`)\n      .send(updatedData)\n      .expect(200);\n\n    expect(res.body.title).toBe(updatedData.title);\n  });\n\n  it('should return 403 for unauthorized update', async () => {\n    const badge = new Badge({\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    });\n    await badge.save();\n\n    const updatedData = {\n      title: 'Updated Badge',\n      description: 'This is an updated badge',\n      points: 200\n    };\n\n    await request(app)\n      .put(`/badges/${badge.id}`)\n      .send(updatedData)\n      .expect(403);\n  });\n});\n\ndescribe('DELETE /badges/:id', () => {\n  it('should delete a badge', async () => {\n    const badge = new Badge({\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    });\n    await badge.save();\n\n    await request(app)\n      .delete(`/badges/${badge.id}`)\n      .expect(204);\n  });\n\n  it('should return 403 for unauthorized delete', async () => {\n    const badge = new Badge({\n      title: 'Test Badge',\n      description: 'This is a test badge',\n      points: 100,\n      createdBy: '123e4567-e89b-12d3-a456-426614174000'\n    });\n    await badge.save();\n\n    await request(app)\n      .delete(`/badges/${badge.id}`)\n      .expect(403);\n  });\n});",
  "server/tests/login.test.js": "const request = require('supertest');\nconst app = require('../src/app');\nconst User = require('../src/models/User');\n\ndescribe('POST /login', () => {\n  it('should login a user with valid credentials', async () => {\n    const userData = {\n      provider: 'gmail',\n      token: 'ya29.a0AfH6SMB...'\n    };\n\n    const res = await request(app)\n      .post('/login')\n      .send(userData)\n      .expect(200);\n\n    expect(res.body).toHaveProperty('id');\n    expect(res.body).toHaveProperty('name');\n    expect(res.body).toHaveProperty('email');\n  });\n\n  it('should return 400 for invalid provider', async () => {\n    const userData = {\n      provider: 'invalid',\n      token: 'ya29.a0AfH6SMB...'\n    };\n\n    await request(app)\n      .post('/login')\n      .send(userData)\n      .expect(400);\n  });\n\n  it('should return 401 for invalid token', async () => {\n    const userData = {\n      provider: 'gmail',\n      token: 'invalid'\n    };\n\n    await request(app)\n      .post('/login')\n      .send(userData)\n      .expect(401);\n  });\n\n  it('should return 503 for service unavailable', async () => {\n    // Mocking service unavailability\n    jest.spyOn(User, 'findOne').mockImplementationOnce(() => {\n      throw new Error('Service unavailable');\n    });\n\n    const userData = {\n      provider: 'gmail',\n      token: 'ya29.a0AfH6SMB...'\n    };\n\n    await request(app)\n      .post('/login')\n      .send(userData)\n      .expect(503);\n  });\n});",
  "server/src/swagger-ui/setup.js": "const express = require('express');\nconst swaggerUi = require('swagger-ui-express');\nconst openApiDocument = require('../../docs/openapi.json');\n\nconst router = express.Router();\n\nrouter.use('/', swaggerUi.serve, swaggerUi.setup(openApiDocument));\n\nmodule.exports = router;",
  "server/readme.md": "# Badge Management System API\n\nThis repository contains the backend API for the Badge Management System, built with Node.js, Express, and MongoDB. The API is fully documented with OpenAPI 3.0.\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (v14 or later)\n- MongoDB (v4.4 or later)\n- npm (v6 or later)\n\n### Installation\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Copy `.env-example` to `.env` and update the environment variables\n4. Start the server: `npm start`\n\n### Development\n\n- Run tests: `npm test`\n- Lint code: `npm run lint`\n- Format code: `npm run format`\n\n### API Documentation\n\nAccess the API documentation at `/docs` when the server is running.\n\n## Project Structure\n\n- `src/index.js` - Entry point\n- `src/app.js` - Express app setup\n- `src/models/` - Database models\n- `src/services/` - Business logic\n- `src/controllers/` - HTTP request handling\n- `src/middleware/` - Middleware functions\n- `tests/` - Integration tests\n- `docs/openapi.json` - OpenAPI specification\n\n## Contributing\n\nPlease read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE.md file for details.",
  "server/Dockerfile": "FROM node:14\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD [ \"npm\", \"start\" ]",
  "server/docker-compose.yml": "version: '3.8'\n\nservices:\n  backend:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MONGODB_URI=mongodb://mongo:27017/badge-management-system\n    depends_on:\n      - mongo\n\n  mongo:\n    image: mongo:4.4\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongo-data:/data/db\n\nvolumes:\n  mongo-data:",
  "server/.dockerignore": "node_modules\nnpm-debug.log\n.env"
}