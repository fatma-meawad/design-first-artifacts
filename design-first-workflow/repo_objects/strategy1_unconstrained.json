{
  "app.js": "const express = require('express');\nconst OpenApiValidator = require('express-openapi-validator');\nconst path = require('path');\nconst openApiDocument = require('../docs/openapi.json');\nconst swaggerUiRouter = require('./swagger-ui/setup');\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use(\n  OpenApiValidator.middleware({\n    apiSpec: path.join(__dirname, '../docs/openapi.json'),\n    validateRequests: true,\n    validateResponses: true,\n  })\n);\n\napp.use('/docs', swaggerUiRouter);\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).json({\n    message: err.message,\n    errors: err.errors,\n  });\n});\n\nmodule.exports = app;",
  "controllers/badgeController.js": "const badgeService = require('../services/badgeService');\nconst { Error } = require('../utils/error');\n\nconst badgeController = {\n  async listBadges(req, res, next) {\n    try {\n      const { sort, limit, offset } = req.query;\n      const badges = await badgeService.getBadges({ sort, limit, offset });\n      res.status(200).json(badges);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async createBadge(req, res, next) {\n    try {\n      const badgeData = req.body;\n      const badge = await badgeService.createBadge(badgeData);\n      res.status(201).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async getBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const badge = await badgeService.getBadgeById(id);\n      res.status(200).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async updateBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const badgeData = req.body;\n      const userId = req.user.id; // Assuming user is authenticated and userId is available\n      const badge = await badgeService.updateBadgeById(id, badgeData, userId);\n      res.status(200).json(badge);\n    } catch (error) {\n      next(error);\n    }\n  },\n\n  async deleteBadgeById(req, res, next) {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id; // Assuming user is authenticated and userId is available\n      await badgeService.deleteBadgeById(id, userId);\n      res.status(204).send();\n    } catch (error) {\n      next(error);\n    }\n  }\n};\n\nmodule.exports = badgeController;",
  "controllers/config/database.js": "const mongoose = require('mongoose');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGODB_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('MongoDB Connected...');\n  } catch (err) {\n    console.error(err.message);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;",
  "controllers/userController.js": "const userService = require('../services/userService');\nconst { Error } = require('../utils/error');\n\nconst userController = {\n  async loginUser(req, res, next) {\n    try {\n      const { provider, token } = req.body;\n      const user = await userService.loginUser({ provider, token });\n      res.status(200).json(user);\n    } catch (error) {\n      next(error);\n    }\n  }\n};\n\nmodule.exports = userController;",
  "index.js": "const app = require('./app');\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});",
  "middleware/Dockerfile": "FROM node:14\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD [ \"npm\", \"start\" ]",
  "middleware/auth.js": "const jwt = require('jsonwebtoken');\nconst { Error } = require('../utils/error');\n\nconst authMiddleware = async (req, res, next) => {\n  try {\n    const token = req.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new Error('Unauthorized', 401);\n    }\n    const decoded = jwt.verify(token, process.env.OAUTH_CLIENT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nmodule.exports = authMiddleware;",
  "middleware/logging.js": "const loggingMiddleware = (req, res, next) => {\n  const start = Date.now();\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    console.log(`${req.method} ${req.originalUrl} - ${res.statusCode} [${duration}ms]`);\n  });\n  next();\n};\n\nmodule.exports = loggingMiddleware;",
  "middleware/validator.js": "const { OpenApiValidator } = require('express-openapi-validator');\nconst path = require('path');\n\nconst validatorMiddleware = OpenApiValidator.middleware({\n  apiSpec: path.join(__dirname, '../../docs/openapi.json'),\n  validateRequests: true,\n  validateResponses: true,\n});\n\nmodule.exports = validatorMiddleware;",
  "models/Badge.js": "const mongoose = require('mongoose');\n\nconst badgeSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    minlength: 1,\n    unique: true\n  },\n  description: {\n    type: String,\n    required: true,\n    minlength: 3,\n    maxlength: 300\n  },\n  points: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n    immutable: true\n  },\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  modifiedAt: {\n    type: Date,\n    default: Date.now\n  },\n  modifiedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    immutable: true\n  },\n  images: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Image',\n    maxItems: 5\n  }]\n});\n\nmodule.exports = mongoose.model('Badge', badgeSchema);",
  "models/Image.js": "const mongoose = require('mongoose');\n\nconst imageSchema = new mongoose.Schema({\n  url: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/.test(v);\n      },\n      message: props => `${props.value} is not a valid URL!`\n    }\n  },\n  size: {\n    type: Number,\n    max: 5\n  }\n});\n\nmodule.exports = mongoose.model('Image', imageSchema);",
  "models/User.js": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minlength: 1\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: {\n      validator: function(v) {\n        return /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/.test(v);\n      },\n      message: props => `${props.value} is not a valid email!`\n    }\n  }\n});\n\nmodule.exports = mongoose.model('User', userSchema);",
  "services/badgeService.js": "const Badge = require('../models/Badge');\n\nconst badgeService = {\n  async createBadge(badgeData) {\n    try {\n      const badge = new Badge(badgeData);\n      await badge.save();\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async getBadges({ sort, limit, offset }) {\n    try {\n      let query = Badge.find();\n      if (sort) {\n        query = query.sort(sort);\n      }\n      if (limit) {\n        query = query.limit(limit);\n      }\n      if (offset) {\n        query = query.skip(offset);\n      }\n      const badges = await query.exec();\n      const total = await Badge.countDocuments();\n      return { items: badges, total };\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async getBadgeById(id) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async updateBadgeById(id, badgeData, userId) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      if (badge.createdBy.toString() !== userId) {\n        throw new Error('You are not the creator of this badge');\n      }\n      Object.assign(badge, badgeData);\n      badge.modifiedAt = new Date();\n      badge.modifiedBy = userId;\n      await badge.save();\n      return badge;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async deleteBadgeById(id, userId) {\n    try {\n      const badge = await Badge.findById(id);\n      if (!badge) {\n        throw new Error('Badge not found');\n      }\n      if (badge.createdBy.toString() !== userId) {\n        throw new Error('You are not the creator of this badge');\n      }\n      await badge.remove();\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nmodule.exports = badgeService;",
  "services/userService.js": "const User = require('../models/User');\n\nconst userService = {\n  async loginUser({ provider, token }) {\n    try {\n      // Placeholder for OAuth verification logic\n      // In a real scenario, you would verify the token with the provider\n      // and fetch user details\n      const user = await User.findOne({ email: 'example@example.com' });\n      if (!user) {\n        throw new Error('User not found');\n      }\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nmodule.exports = userService;",
  "swagger-ui/setup.js": "const express = require('express');\nconst swaggerUi = require('swagger-ui-express');\nconst openApiDocument = require('../../docs/openapi.json');\n\nconst router = express.Router();\n\nrouter.use('/', swaggerUi.serve, swaggerUi.setup(openApiDocument));\n\nmodule.exports = router;"
}